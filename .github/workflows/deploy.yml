name: Deploy Laravel to AWS ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: laravel/hello-laravel
  ECS_CLUSTER: laravel-cluster
  ECS_SERVICE: laravel-service
  DOCKERFILE_PATH: docker/php/Dockerfile

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
          install: true
         

      - name: Create builder instance
        id: buildx
        run: |
          docker buildx create \
            --name mybuilder \
            --driver docker-container \
            --use
          docker buildx inspect --bootstrap
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-    

      - name: Build Docker image with cache
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker buildx build \
            --file ${{ env.DOCKERFILE_PATH }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --platform linux/amd64 \
            --output type=image,push=false \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --progress plain \
            .

      - name: Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker buildx build \
            --file ${{ env.DOCKERFILE_PATH }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --platform linux/amd64 \
            --push \
            .

      # Rest of your deployment steps (task definition, ECS deploy, etc.)
      - name: Install dependencies for task definition
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate task definition
        id: task-def
        run: |
          cat <<EOF > task-definition.json
          {
            "family": "laravel-task",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}",
            "containerDefinitions": [
              {
                "name": "laravel-app",
                "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 9000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {
                    "name": "APP_ENV",
                    "value": "production"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/laravel-app",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048"
          }
          EOF
          echo "TASK_DEFINITION=$(cat task-definition.json | jq -c)" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.TASK_DEFINITION }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true