name: Deploy Laravel to AWS ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: laravel/hello-laravel
  ECS_CLUSTER: laravel-cluster
  ECS_SERVICE: laravel-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Previous steps (checkout, AWS login, Docker build/push) remain the same...
      
      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create task definition file
        run: |
          cat <<EOF > task-definition.json
          {
            "family": "laravel-task",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ secrets.ECS_TASK_EXECUTION_ROLE_ARN }}",
            "containerDefinitions": [
              {
                "name": "laravel-app",
                "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 9000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {
                    "name": "APP_ENV",
                    "value": "production"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/laravel-app",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048"
          }
          EOF

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true
          force-new-deployment: true